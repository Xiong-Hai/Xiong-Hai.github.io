<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker离线安装</title>
    <link href="/2023/12/10/Docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    <url>/2023/12/10/Docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="一、下载docker离线安装包并安装"><a href="#一、下载docker离线安装包并安装" class="headerlink" title="一、下载docker离线安装包并安装"></a>一、下载docker离线安装包并安装</h3><h4 id="1-1-下载docker离线安装包"><a href="#1-1-下载docker离线安装包" class="headerlink" title="1.1 下载docker离线安装包"></a>1.1 下载docker离线安装包</h4><p>下载合适版本，以linux_x86_64为例下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/">Index of linux&#x2F;static&#x2F;stable&#x2F;x86_64&#x2F; (</a><a href="http://docker.com/">docker.com</a><a href="https://download.docker.com/linux/static/stable/x86_64/">)</a>本次下载的是<code>docker-23.0.0.tgz</code>然后解压缩后有以下文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 docker]# tar -zxvf docker-23.0.0.tgz <br><br>[root@192 /]# ls -l /docker/<br>总用量 179180<br>-rwxr-xr-x. 1 admin admin 38203392 2月   2 2023 containerd<br>-rwxr-xr-x. 1 admin admin  9752576 2月   2 2023 containerd-shim-runc-v2<br>-rwxr-xr-x. 1 admin admin 19152896 2月   2 2023 ctr<br>-rwxr-xr-x. 1 admin admin 34498624 2月   2 2023 docker<br>-rwxr-xr-x. 1 admin admin 64941936 2月   2 2023 dockerd<br>-rwxr-xr-x. 1 admin admin   765808 2月   2 2023 docker-init<br>-rwxr-xr-x. 1 admin admin  1945195 2月   2 2023 docker-proxy<br>-rwxr-xr-x. 1 admin admin 14214368 2月   2 2023 runc<br></code></pre></td></tr></table></figure><h4 id="1-2然后将这些文件复制到-usr-bin执行文件目录下并赋予执行权限"><a href="#1-2然后将这些文件复制到-usr-bin执行文件目录下并赋予执行权限" class="headerlink" title="1.2然后将这些文件复制到&#x2F;usr&#x2F;bin执行文件目录下并赋予执行权限"></a>1.2然后将这些文件复制到&#x2F;usr&#x2F;bin执行文件目录下并赋予执行权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 docker]# cp /docker/* /usr/bin/<br><br>[root@192 docker]# chmod +x /usr/bin/containerd<br>[root@192 docker]# chmod +x /usr/bin/containerd-shim-runc-v2<br>[root@192 docker]# chmod +x /usr/bin/ctr<br>[root@192 docker]# chmod +x /usr/bin/docker<br>[root@192 docker]# chmod +x /usr/bin/dockerd<br>[root@192 docker]# chmod +x /usr/bin/docker-init<br>[root@192 docker]# chmod +x /usr/bin/docker-proxy<br>[root@192 docker]# chmod +x /usr/bin/runc<br></code></pre></td></tr></table></figure><h4 id="1-3启动docker并验证是否安装成功"><a href="#1-3启动docker并验证是否安装成功" class="headerlink" title="1.3启动docker并验证是否安装成功"></a>1.3启动docker并验证是否安装成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 /]# sudo /usr/bin/dockerd &amp;<br>[1] 26695<br>[root@192 /]# INFO[2023-12-11T01:18:51.209522829+08:00] Starting up    <br><br>[root@192 /]# docker -v<br>Docker version 23.0.0, build e92dd87<br>[root@192 /]# docker ps -a<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br></code></pre></td></tr></table></figure><p>看到docker版本号即为安装成功</p><h4 id="1-4配置docker开机自启动"><a href="#1-4配置docker开机自启动" class="headerlink" title="1.4配置docker开机自启动"></a>1.4配置docker开机自启动</h4><p>打开终端并以管理员身份登录到目标机器。检查系统是否已经安装了 <code>systemd</code> 服务管理器。大多数现代 Linux 发行版都使用 <code>systemd</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 /]# systemctl --version<br>systemd 219<br>+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 -SECCOM<br><br>//创建docker.service文件<br>[root@192 system]# vim /etc/systemd/system/docker.service<br>//添加以下内容<br>[Unit]<br>Description=Docker Service<br>Wants=network.target<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/bin/dockerd<br>Restart=always<br>StartLimitBurst=3<br>StartLimitInterval=60s<br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br>TasksMax=infinity<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>保存并关闭<code>docker.service</code>文件，先停止docker服务进程在执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">//执行以下命令启用 Docker 服务：<br>[root@192 system]# systemctl enable docker.service<br><br>//执行以下命令启动 Docker 服务：<br>[root@192 system]# systemctl start docker.service<br><br>//执行以下命令检查 Docker 服务的状态：<br>[root@192 ~]# systemctl status docker.service<br>● docker.service - Docker Application Container Engine<br>   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)<br>   Active: active (running) since 一 2023-12-11 02:22:27 CST; 28s ago<br>     Docs: http://docs.docker.com<br> Main PID: 4166 (dockerd-current)<br>    Tasks: 17<br>   CGroup: /system.slice/docker.service<br>           ├─4166 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --exec-opt native.cgroupdriver=systemd --userland-proxy-path=/usr...           └─4171 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/contai...<br></code></pre></td></tr></table></figure><h3 id="二、离线安装image"><a href="#二、离线安装image" class="headerlink" title="二、离线安装image"></a>二、离线安装image</h3><h4 id="2-1准备离线安装镜像"><a href="#2-1准备离线安装镜像" class="headerlink" title="2.1准备离线安装镜像"></a>2.1准备离线安装镜像</h4><p>先在线环境中准备 Docker 镜像，在可联网的环境中使用 <code>docker pull</code> 命令下载所需的 Docker 镜像。拉取之后可以查看，之后使用<code>docker save -o image.tar image:tag</code>将镜像保存为存为 tar 归档文件，再上传到离线安装的服务器环境中去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZbp11pk9q75cmizeab62bZ ~]# docker images<br>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE<br>nginx                       latest    eea7b3dcba7e   3 months ago    187MB<br>mysql                       8.0.31    7484689f290f   12 months ago   538MB<br>bladex/sentinel-dashboard   latest    aa398704ebd3   3 years ago     147MB<br><br>[root@iZbp11pk9q75cmizeab62bZ ~]# docker save -o mysql_8.0.31.tar mysql:8.0.31<br>[root@iZbp11pk9q75cmizeab62bZ docker]# ll<br>总用量 602828<br>drwxrwxr-x. 2 admin admin       146 2月   2 2023 docker<br>-rw-r--r--. 1 root  root  550466048 12月 11 02:28 mysql_8.0.31.tar<br>docker save -o image.tar image:tag<br></code></pre></td></tr></table></figure><h4 id="2-2-离线拉取镜像"><a href="#2-2-离线拉取镜像" class="headerlink" title="2.2 离线拉取镜像"></a>2.2 离线拉取镜像</h4><p>使用<code>docker load -i image.tar</code>将归档文件mysql镜像安装使用<code>docker images</code>验证镜像是否拉取成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 docker]# docker load -i /docker/mysql_8.0.31.tar <br>d3cc7b6aa7bc: Loading layer [==================================================&gt;]  109.2MB/109.2MB<br>a7f421510691: Loading layer [==================================================&gt;]  11.26kB/11.26kB<br>6ac2db160c6c: Loading layer [==================================================&gt;]  2.293MB/2.293MB<br>7fe65049a2a9: Loading layer [==================================================&gt;]  13.92MB/13.92MB<br>da1824686db3: Loading layer [==================================================&gt;]  7.168kB/7.168kB<br>d410d4efd0e7: Loading layer [==================================================&gt;]  3.072kB/3.072kB<br>60c4dab21dc3: Loading layer [==================================================&gt;]  178.4MB/178.4MB<br>d00057f89692: Loading layer [==================================================&gt;]  3.072kB/3.072kB<br>2f42ce9d7b80: Loading layer [==================================================&gt;]  246.5MB/246.5MB<br>8408fed6a9d6: Loading layer [==================================================&gt;]  17.41kB/17.41kB<br>336175ddf157: Loading layer [==================================================&gt;]  1.536kB/1.536kB<br>Loaded image: mysql:8.0.31<br><br>[root@192 docker]# docker images<br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>mysql        8.0.31    7484689f290f   12 months ago   538MB<br></code></pre></td></tr></table></figure><h3 id="三、docker-compose安装"><a href="#三、docker-compose安装" class="headerlink" title="三、docker-compose安装"></a>三、docker-compose安装</h3><h4 id="3-1下载docker-compose并安装"><a href="#3-1下载docker-compose并安装" class="headerlink" title="3.1下载docker-compose并安装"></a>3.1下载docker-compose并安装</h4><p>Docker Compose 是Docker的组装工具，用于创建和调试多个Docker容器，并在同一个Docker主机上运行它们。Docker Compose基于YAML文件，描述多个容器之间的相互关系，以及每个容器所需要的配置和环境变量。</p><p>Docker Compose和Docker版本对应关系：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><p>Docker Compose下载地址：<a href="https://github.com/docker/compose/releases">Releases · docker&#x2F;compose (</a><a href="http://github.com/">github.com</a><a href="https://github.com/docker/compose/releases">)</a></p><p>将下载的<code>docker-compose-linux-x86_64</code>文件上传到离线服务器移动目录改名授权后使用<code>docker-compose --version</code>看到版本号即安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 docker]# ll<br>总用量 660820<br>drwxrwxr-x. 2 admin admin       146 2月   2 2023 docker<br>-rw-r--r--. 1 root  root   66824010 12月 11 01:04 docker-23.0.0.tgz<br>-rw-r--r--. 1 root  root   59383631 12月 11 02:54 docker-compose-linux-x86_64<br>-rw-r--r--. 1 root  root  550466048 12月 11 02:28 mysql_8.0.31.tar<br><br>//将docker-compose-linux-x86_64文件移动到/usr/local/bin/目录下并改名<br>[root@192 docker]# sudo mv /docker/docker-compose-linux-x86_64 /usr/local/bin/docker-compose<br><br>//授予执行权限<br>[root@192 docker]# chmod +x /usr/local/bin/docker-compose <br><br>//验证是否成功<br>[root@192 docker]# docker-compose --version<br>Docker Compose version v2.20.3<br></code></pre></td></tr></table></figure><h4 id="3-2docker-compose启动"><a href="#3-2docker-compose启动" class="headerlink" title="3.2docker-compose启动"></a>3.2docker-compose启动</h4><p>对已经拉取的<code>mysql:8.0.31</code>镜像使用<code>docker-compose</code>启动</p><p>创建一个名为 <code>docker-compose.yml</code> 的文件，并在其中定义服务配置，使用离线拉取的<code>mysql:8.0.3</code>镜像启动容器，文件内容不做讲解，文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">1 version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br> <span class="hljs-attr">2 services:</span><br> <span class="hljs-attr">3   mysql:</span><br> <span class="hljs-attr">4     image:</span> <span class="hljs-string">mysql:8.0.31</span><br> <span class="hljs-attr">5     container_name:</span> <span class="hljs-string">mysql</span><br> <span class="hljs-attr">6     restart:</span> <span class="hljs-string">always</span><br> <span class="hljs-attr">7     ports:</span><br> <span class="hljs-number">8</span>       <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br> <span class="hljs-attr">9     environment:</span><br><span class="hljs-attr">10       MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">password</span><br><span class="hljs-attr">11     volumes:</span><br><span class="hljs-number">12</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">/docker/mysql/data:/var/lib/mysql</span><br><span class="hljs-attr">13     networks:</span><br><span class="hljs-number">14</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">mynetwork</span><br><span class="hljs-number">15</span> <br><span class="hljs-attr">16 networks:</span><br><span class="hljs-attr">17   mynetwork:</span>  <br></code></pre></td></tr></table></figure><p>使用命令<code>docker-compose up -d</code>启动使用<code>docker-compose ps</code>验证，看到容器启动表示成功，进入容器内容执行命令检验</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 docker]# docker-compose up -d<br>[+] Running 2/2<br> ✔ Network docker_mynetwork  Created                                                                                                                                                                      0.1s <br> ✔ Container mysql           Started                                                                                                                                                                      0.1s<br><br>[root@192 docker]# docker-compose ps<br>NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS<br>mysql               mysql:8.0.31        &quot;docker-entrypoint.s…&quot;   mysql               5 minutes ago       Up 6 seconds        0.0.0.0:3306-&gt;3306/tcp, 33060/tcp<br>[root@192 docker]# docker-compose exec mysql mysql -u root -p <br>Enter password: <br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 9<br>Server version: 8.0.31 MySQL Community Server - GPL<br><br>Copyright (c) 2000, 2022, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.01 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">mysql&gt; </span><br></code></pre></td></tr></table></figure><p>用navicat连接工具测试成功</p><p><img src="/2023/12/10/Docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/docker-mysql.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kafka整合</title>
    <link href="/2023/10/19/Kafka%E6%95%B4%E5%90%88/"/>
    <url>/2023/10/19/Kafka%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="一、kafka背景"><a href="#一、kafka背景" class="headerlink" title="一、kafka背景"></a>一、kafka背景</h3><p>Kafka 是一种分布式流处理平台，最初由LinkedIn开发，并于2011年成为Apache软件基金会的顶级项目。它提供了高吞吐量、可扩展性和持久性的消息发布和订阅系统。</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ol><li>日志收集与聚合：<ul><li>Kafka 可以作为日志收集系统的核心组件，帮助将分布在不同服务器和应用程序中的日志数据集中存储和处理。</li><li>它支持高吞吐量的日志传输，并具备可靠性、持久性和容错性，适用于大规模的日志处理需求。</li></ul></li><li>实时流处理：<ul><li>Kafka 作为消息传递平台，可以与实时流处理框架（如 Apache Flink、Apache Spark Streaming）结合使用，实现实时数据的流式处理和分析。</li><li>实时流处理场景包括实时数据管道、实时报警监控、实时指标计算等。</li></ul></li><li>数据集成与异步通信：<ul><li>Kafka 可以用于不同系统之间的数据集成和解耦，通过发布-订阅模型进行异步通信。</li><li>例如，将产生的事件或变更记录发布到 Kafka 主题中，然后其他系统订阅这些主题来获取相关数据，实现系统之间的解耦和灵活性。</li></ul></li><li>系统解耦与削峰填谷：<ul><li>使用 Kafka 可以将不同的业务模块解耦，降低系统之间的依赖性。</li><li>同时，Kafka 的高吞吐量特性可以帮助应对流量峰值，通过削峰填谷的方式平滑处理系统的压力。</li></ul></li><li>消息队列与任务调度：<ul><li>Kafka 可以作为可靠的消息队列，在分布式系统中实现任务调度和消息传递。</li><li>它支持消息的持久化存储、批量处理和消费者组管理，适用于异步任务处理、事件驱动架构等场景。</li></ul></li></ol><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><img src="/2023/10/19/Kafka%E6%95%B4%E5%90%88/Kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png"></p><ol><li>Broker（代理）：<ul><li>每个运行中的 Kafka 服务器节点称为 Broker。</li><li>Broker负责接收来自生产者的消息并将其存储在磁盘上，同时为消费者提供订阅和拉取消息的服务。</li></ul></li><li>Topic（主题）：<ul><li>主题是消息的逻辑分类单元，每条发布到 Kafka 的消息都有一个特定的主题。</li><li>主题可以被分成一个或多个分区，并且可以在 Kafka 集群中进行分布。</li></ul></li><li>Partition（分区）：<ul><li>主题可以被划分为多个分区，每个分区是一个有序、不可变的消息序列。</li><li>分区允许数据的水平扩展和并行处理，并且还支持副本机制以提供容错性和高可用性。</li></ul></li><li>Producer（生产者）：<ul><li>生产者负责向 Kafka 的主题发送消息。</li><li>生产者可以选择将消息发送到特定的分区，也可以依靠 Kafka 的负载均衡算法自动选择分区。</li></ul></li><li>Consumer（消费者）：<ul><li>消费者是从 Kafka 主题订阅消息并处理它们的应用程序。</li><li>消费者以消费者组的形式存在，每个分区只能由同一消费者组内的一个消费者来消费。</li></ul></li><li>Consumer Group（消费者组）：<ul><li>多个消费者可以组成一个消费者组，共同消费主题中的消息。</li><li>消费者组允许实现消息的并行处理和水平扩展，并确保每条消息只被消费者组中的一个消费者处理。</li></ul></li><li>Offset（位移）：<ul><li>Offset 是指每个分区中消息的唯一标识符或偏移量。</li><li>消费者在读取分区的消息时会跟踪位移，以确定下一条要读取的消息位置。</li></ul></li><li>Replication（副本）：<ul><li>Kafka 使用副本机制来提供数据冗余和容错性。</li><li>每个分区可以有多个副本，其中一个是领导者负责处理客户端请求，其他副本是追随者用于备份数据。</li></ul></li><li>Commit（提交）和 Acknowledgement（确认）：<ul><li>消费者在成功消费一条消息后，需要将消费的位移提交给 Kafka。</li><li>提交位移可以同步或异步进行，并且消费者可以根据返回的确认信息判断是否提交成功。</li></ul></li></ol><h4 id="通信模式"><a href="#通信模式" class="headerlink" title="通信模式"></a>通信模式</h4><h5 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h5><p><img src="/2023/10/19/Kafka%E6%95%B4%E5%90%88/kafka%E7%82%B9%E5%AF%B9%E7%82%B9.png">如上图所示，点对点模式通常是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动的去拉取消息进行消费。点对点模型的的优点是消费者拉取消息的频率可以由自己控制。但是消息队列是否有消息需要消费，在消费者端无法感知，所以在消费者端需要额外的线程去监控。</p><h5 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h5><p><img src="/2023/10/19/Kafka%E6%95%B4%E5%90%88/Kafka%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.png">发布订阅模式是一个基于消息送的消息传送模型，改模型可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息推送给订阅过该类消息的消费者（类似微信公众号）。由于是消费者被动接收推送，所以无需感知消息队列是否有待消费的消息！但是consumer1、consumer2、consumer3由于机器性能不一样，所以处理消息的能力也会不一样，但消息队列却无法感知消费者消费的速度！所以推送的速度成了发布订阅模模式的一个问题！</p><h3 id="二、Kafka服务搭建"><a href="#二、Kafka服务搭建" class="headerlink" title="二、Kafka服务搭建"></a>二、Kafka服务搭建</h3><p>Kafka 依赖于 ZooKeeper 来管理集群的元数据和协调功能。为了方便学习采用docker-compose部署，新建docker-compose.yml文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">zookeeper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;zookeeper:latest&#x27;</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">&#x27;zookeeper&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;2181:2181&#x27;</span><br><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;wurstmeister/kafka:latest&#x27;</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">&#x27;kafka&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9092:9092&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">KAFKA_BROKER_ID:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span><br>      <span class="hljs-attr">KAFKA_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://:9092</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://ip:9092</span><br>      <span class="hljs-attr">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">KAFKA_HEAP_OPTS:</span> <span class="hljs-string">&quot;-Xmx256M -Xms256M&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">zookeeper</span><br></code></pre></td></tr></table></figure><p>使用命令启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="三、SpringBoot整合"><a href="#三、SpringBoot整合" class="headerlink" title="三、SpringBoot整合"></a>三、SpringBoot整合</h3><p>pom文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改application.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">demo-kafka</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-comment"># 指定 Kafka 集群的地址和端口</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">ip:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-comment"># 设置消费者所属的消费者组的 ID，可以用来实现负载均衡和消息分区的协调。</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 设置是否启用自动提交消费位移。如果设置为 true，则消费者会自动提交位移；如果设置为 false，则需要手动管理位移的提交。</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 设置自动提交消费位移的时间间隔，例如 &quot;100ms&quot;。</span><br>      <span class="hljs-attr">auto-commit-interval:</span> <span class="hljs-string">100ms</span><br>      <span class="hljs-attr">properties:</span><br>        <span class="hljs-comment"># 设置会话超时时间，即在此时间内，消费者没有向 Kafka 服务器发送心跳请求，则被认为失去连接，默认为 15000 毫秒</span><br>        <span class="hljs-attr">session.timeout.ms:</span> <span class="hljs-number">15000</span><br>      <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-comment"># 设置当消费者加入消费者组时或位移无效的情况下，从何处开始消费消息。&quot;earliest&quot; 表示从最早的可用消息开始消费，&quot;latest&quot; 表示从最新的消息开始消费。</span><br>      <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">earliest</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-comment"># 设置生产者在发生可重试的异常时尝试发送消息的最大次数，设置为 0 表示不进行重试。</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment"># ：设置生产者发送到 Kafka 的批量消息的大小，达到指定大小后会触发批量发送。</span><br>      <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16384</span><br>      <span class="hljs-comment"># 设置生产者用于缓冲等待发送的消息的总内存大小。</span><br>      <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br></code></pre></td></tr></table></figure><p>构建生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaProducer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaProducer</span><span class="hljs-params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.kafkaTemplate = kafkaTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topic   话题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String topic, String message)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;发送主题:&#123;&#125;发送内容:&#123;&#125;&quot;</span>, topic, message);<br>        kafkaTemplate.send(topic, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConsumer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接收消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;my-first-topic&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">// 处理接收到的消息逻辑</span><br>        log.info(<span class="hljs-string">&quot;接受消息:&#123;&#125;&quot;</span>, message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>基本概念和简单整合使用，待深入了解。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MQTT整合</title>
    <link href="/2023/10/12/MQTT%E6%95%B4%E5%90%88/"/>
    <url>/2023/10/12/MQTT%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="一、MQTT协议"><a href="#一、MQTT协议" class="headerlink" title="一、MQTT协议"></a>一、MQTT协议</h3><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于<code>发布/订阅</code>（<code>publish/subscribe</code>）模式的“轻量级”通讯协议，该协议构建于TCP&#x2F;IP协议上。MQTT最大优点在于，<strong>用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务</strong>。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p>要了解 MQTT 的工作原理，首先需要掌握以下几个概念：MQTT 客户端、MQTT Broker、发布-订阅模式、主题、QoS。</p><h4 id="MQTT-客户端"><a href="#MQTT-客户端" class="headerlink" title="MQTT 客户端"></a><strong>MQTT 客户端</strong></h4><p>任何运行 MQTT 客户端库的应用或设备都是 MQTT 客户端。例如，使用 MQTT 的即时通讯应用是客户端，使用 MQTT 上报数据的各种传感器是客户端，各种 MQTT 测试工具也是客户端。</p><h4 id="MQTT-Broker"><a href="#MQTT-Broker" class="headerlink" title="MQTT Broker"></a><strong>MQTT Broker</strong></h4><p>MQTT Broker 是负责处理客户端请求的关键组件，包括建立连接、断开连接、订阅和取消订阅等操作，同时还负责消息的转发。一个高效强大的 MQTT Broker 能够轻松应对海量连接和百万级消息吞吐量，从而帮助物联网服务提供商专注于业务发展，快速构建可靠的 MQTT 应用。</p><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a><strong>发布-订阅模式</strong></h4><p>发布-订阅模式与客户端-服务器模式的不同之处在于，它将发送消息的客户端（发布者）和接收消息的客户端（订阅者）进行了解耦。发布者和订阅者之间无需建立直接连接，而是通过 MQTT Broker 来负责消息的路由和分发。</p><p>下图展示了 MQTT 发布&#x2F;订阅过程。温度传感器作为客户端连接到 MQTT Broker，并通过发布操作将温度数据发布到一个特定主题（例如 <code>Temperature</code>）。MQTT Broker 接收到该消息后会负责将其转发给订阅了相应主题（<code>Temperature</code>）的订阅者客户端。</p><p><img src="/2023/10/12/MQTT%E6%95%B4%E5%90%88/mqtt%E8%AE%A2%E9%98%85.png"></p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a><strong>主题</strong></h4><p>MQTT 协议根据主题来转发消息。主题通过 <code>/</code> 来区分层级，类似于 URL 路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">chat/room/1<br><br>sensor/10/temperature<br><br>sensor/+/temperature<br></code></pre></td></tr></table></figure><p>MQTT 主题支持以下两种通配符：<code>+</code> 和 <code>#</code>。</p><ul><li><code>+</code>：表示单层通配符，例如 <code>a/+</code> 匹配 <code>a/x</code> 或 <code>a/y</code>。</li><li><code>#</code>：表示多层通配符，例如 <code>a/#</code> 匹配 <code>a/x</code>、<code>a/b/c/d</code>。</li></ul><blockquote><p><strong>注意</strong>：通配符主题只能用于订阅，不能用于发布。</p></blockquote><h4 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a><strong>QoS</strong></h4><p>MQTT 提供了三种服务质量（QoS），在不同网络环境下保证消息的可靠性。</p><ul><li>QoS 0：消息最多传送一次。如果当前客户端不可用，它将丢失这条消息。</li><li>QoS 1：消息至少传送一次。</li><li>QoS 2：消息只传送一次。</li></ul><h3 id="二、MQTT服务搭建"><a href="#二、MQTT服务搭建" class="headerlink" title="二、MQTT服务搭建"></a>二、MQTT服务搭建</h3><p>EMQ X 是一款完全开源，高可用低时延的百万级分布式物联网 MQTT 5.0 消息服务器。EMQX 支持多种协议，包括 MQTT (3.1、3.1.1 和 5.0)、HTTP、QUIC 和 WebSocket 等，保证各种网络环境和硬件设备的可访问性。EMQX 还提供了全面的 SSL&#x2F;TLS 功能支持，比如双向认证以及多种身份验证机制，为物联网设备和应用程序提供可靠和高效的通信基础设施。</p><p>使用Docker可以快速搭建服务</p><p>运行以下命令获取 Docker 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull emqx/emqx:5.2.1<br></code></pre></td></tr></table></figure><p>运行以下命令启动 Docker 容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx:5.2.1<br></code></pre></td></tr></table></figure><p>通过浏览器访问 <a href="http://localhost:18083/"><strong>http://localhost:18083/</strong></a>（<a href="http://localhost/">localhost</a> 可替换为您的实际 IP 地址）以访问 <a href="https://www.emqx.io/docs/zh/v5.2/dashboard/introduction.html"><strong>EMQX Dashboard</strong></a> 管理控制台，进行设备连接与相关指标监控管理。</p><p>默认用户名及密码：</p><p><code>admin</code></p><p><code>public</code></p><p><img src="/2023/10/12/MQTT%E6%95%B4%E5%90%88/EMQXdashboard.png"></p><h3 id="三、SpringBoot集成"><a href="#三、SpringBoot集成" class="headerlink" title="三、SpringBoot集成"></a>三、SpringBoot集成</h3><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.integration<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-integration-stream<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.integration<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-integration-mqtt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="application-yml文件配置"><a href="#application-yml文件配置" class="headerlink" title="application.yml文件配置"></a>application.yml文件配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## MQTT配置</span><br><span class="hljs-attr">mqtt:</span><br>  <span class="hljs-comment">#MQTT-用户名</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-comment">#MQTT-密码</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">public</span><br>  <span class="hljs-comment">#MQTT-服务器连接地址</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">tcp://ip:1883</span><br>  <span class="hljs-comment">#MQTT-连接服务器默认客户端ID</span><br>  <span class="hljs-attr">clientId:</span> <span class="hljs-string">client-test_server</span><br>  <span class="hljs-comment">#MQTT-默认的消息推送主题，实际可在调用接口时指定</span><br>  <span class="hljs-attr">defaultTopic:</span> <span class="hljs-string">topic</span><br>  <span class="hljs-comment">#MQTT-心跳</span><br>  <span class="hljs-attr">keepAliveInterval:</span> <span class="hljs-number">60</span><br>  <span class="hljs-comment">#MQTT-自动重连</span><br>  <span class="hljs-attr">automaticReconnect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#MQTT-清除session</span><br>  <span class="hljs-attr">cleanSession:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment">#MQTT-超时连接</span><br>  <span class="hljs-attr">completionTimeout:</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h4 id="订阅接受消息"><a href="#订阅接受消息" class="headerlink" title="订阅接受消息"></a>订阅接受消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@IntegrationComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqttSenderConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.clientId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String clientId;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.defaultTopic&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String defaultTopic;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.keepAliveInterval&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer keepAliveInterval;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.automaticReconnect&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean automaticReconnect;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.cleanSession&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean cleanSession;<br>    <span class="hljs-meta">@Value(&quot;$&#123;mqtt.completionTimeout&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer completionTimeout;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mqtt连接选项</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> MqttConnectOptions&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MqttConnectOptions <span class="hljs-title function_">mqttConnectOptions</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MqttConnectOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttConnectOptions</span>();<br>        options.setUserName(username);<br>        options.setPassword(password.toCharArray());<br>        options.setServerURIs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;url&#125;);<br>        options.setKeepAliveInterval(keepAliveInterval);<br>        options.setAutomaticReconnect(automaticReconnect);<br>        options.setCleanSession(cleanSession);<br>        options.setConnectionTimeout(completionTimeout);<br>        <span class="hljs-keyword">return</span> options;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mqtt-paho客户工厂</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mqttConnectOptions mqtt连接选项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> MqttPahoClientFactory&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MqttPahoClientFactory <span class="hljs-title function_">mqttPahoClientFactory</span><span class="hljs-params">(MqttConnectOptions mqttConnectOptions)</span> &#123;<br>        <span class="hljs-type">DefaultMqttPahoClientFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMqttPahoClientFactory</span>();<br>        factory.setConnectionOptions(mqttConnectOptions);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-comment">// 接收通道1</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageChannel <span class="hljs-title function_">mqttInputChannel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectChannel</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//接受通道2</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageChannel <span class="hljs-title function_">mqttInputChannelTmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectChannel</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 配置client,监听topic</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageProducer <span class="hljs-title function_">inbound</span><span class="hljs-params">(MqttPahoClientFactory mqttPahoClientFactory)</span> &#123;<br>        <span class="hljs-type">MqttPahoMessageDrivenChannelAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttPahoMessageDrivenChannelAdapter</span>(clientId + <span class="hljs-string">&quot;-subscribe&quot;</span>, mqttPahoClientFactory, <span class="hljs-string">&quot;hello1&quot;</span>, <span class="hljs-string">&quot;topic1&quot;</span>);<br>        <span class="hljs-comment">// 此处设置的是毫秒 10000为十秒</span><br>        adapter.setCompletionTimeout(<span class="hljs-number">10000</span>);<br>        adapter.setConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPahoMessageConverter</span>());<br>        adapter.setQos(<span class="hljs-number">1</span>);<br>        adapter.setOutputChannel(mqttInputChannel());<br>        <span class="hljs-keyword">return</span> adapter;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置client2,监听topic</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageProducer <span class="hljs-title function_">inboundTmp</span><span class="hljs-params">(MqttPahoClientFactory mqttPahoClientFactory)</span> &#123;<br>        <span class="hljs-type">MqttPahoMessageDrivenChannelAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttPahoMessageDrivenChannelAdapter</span>(clientId + <span class="hljs-string">&quot;-subscribeTmp&quot;</span>, mqttPahoClientFactory, <span class="hljs-string">&quot;hello2&quot;</span>, <span class="hljs-string">&quot;topic2&quot;</span>);<br>        <span class="hljs-comment">// 此处设置的是毫秒 10000为十秒</span><br>        adapter.setCompletionTimeout(<span class="hljs-number">10000</span>);<br>        adapter.setConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPahoMessageConverter</span>());<br>        adapter.setQos(<span class="hljs-number">1</span>);<br>        adapter.setOutputChannel(mqttInputChannelTmp());<br>        <span class="hljs-keyword">return</span> adapter;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过通道1获取数据</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ServiceActivator(inputChannel = &quot;mqttInputChannel&quot;)</span><br>    <span class="hljs-keyword">public</span> MessageHandler <span class="hljs-title function_">receiveHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> message.getHeaders().get(<span class="hljs-string">&quot;mqtt_receivedTopic&quot;</span>).toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">mess</span> <span class="hljs-operator">=</span> message.getPayload().toString();<br>            log.info(<span class="hljs-string">&quot;通道1监听收到来自:&#123;&#125;的消息:&#123;&#125;&quot;</span>, topic, mess);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过通道2获取数据</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ServiceActivator(inputChannel = &quot;mqttInputChannelTmp&quot;)</span><br>    <span class="hljs-keyword">public</span> MessageHandler <span class="hljs-title function_">receiveHandlerTmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> message.getHeaders().get(<span class="hljs-string">&quot;mqtt_receivedTopic&quot;</span>).toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">mess</span> <span class="hljs-operator">=</span> message.getPayload().toString();<br>            log.info(<span class="hljs-string">&quot;通道2监听收到来自:&#123;&#125;的消息:&#123;&#125;&quot;</span>, topic, mess);<br>        &#125;;<br>    &#125;<br><br><br>    <span class="hljs-comment">/************************************************************************************************************/</span><br><br>    <span class="hljs-comment">// 推送通道</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageChannel <span class="hljs-title function_">mqttOutputChannel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectChannel</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ServiceActivator(inputChannel = &quot;mqttOutputChannel&quot;)</span><br>    <span class="hljs-keyword">public</span> MessageHandler <span class="hljs-title function_">sendHandler</span><span class="hljs-params">(MqttPahoClientFactory mqttPahoClientFactory)</span> &#123;<br>        <span class="hljs-type">MqttPahoMessageHandler</span> <span class="hljs-variable">messageHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MqttPahoMessageHandler</span>(clientId + <span class="hljs-string">&quot;-publish&quot;</span>, mqttPahoClientFactory);<br>        messageHandler.setAsync(<span class="hljs-literal">true</span>);<br>        messageHandler.setDefaultQos(<span class="hljs-number">1</span>);<br>        messageHandler.setDefaultTopic(defaultTopic);<br>        <span class="hljs-keyword">return</span> messageHandler;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>效果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">01</span>:<span class="hljs-number">58.089</span>  INFO <span class="hljs-number">22488</span> --- <span class="hljs-selector-attr">[erver-subscribe]</span> c<span class="hljs-selector-class">.e</span><span class="hljs-selector-class">.mqtt</span><span class="hljs-selector-class">.configuration</span><span class="hljs-selector-class">.MqttSenderConfig</span>  : 通道<span class="hljs-number">1</span>监听收到来自:hello1的消息:&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">01</span>:<span class="hljs-number">59.502</span>  INFO <span class="hljs-number">22488</span> --- <span class="hljs-selector-attr">[erver-subscribe]</span> c<span class="hljs-selector-class">.e</span><span class="hljs-selector-class">.mqtt</span><span class="hljs-selector-class">.configuration</span><span class="hljs-selector-class">.MqttSenderConfig</span>  : 通道<span class="hljs-number">1</span>监听收到来自:hello1的消息:&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00.358</span>  INFO <span class="hljs-number">22488</span> --- <span class="hljs-selector-attr">[erver-subscribe]</span> c<span class="hljs-selector-class">.e</span><span class="hljs-selector-class">.mqtt</span><span class="hljs-selector-class">.configuration</span><span class="hljs-selector-class">.MqttSenderConfig</span>  : 通道<span class="hljs-number">1</span>监听收到来自:hello1的消息:&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">02</span>:<span class="hljs-number">03.755</span>  INFO <span class="hljs-number">22488</span> --- <span class="hljs-selector-attr">[er-subscribeTmp]</span> c<span class="hljs-selector-class">.e</span><span class="hljs-selector-class">.mqtt</span><span class="hljs-selector-class">.configuration</span><span class="hljs-selector-class">.MqttSenderConfig</span>  : 通道<span class="hljs-number">2</span>监听收到来自:hello2的消息:&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">02</span>:<span class="hljs-number">04.922</span>  INFO <span class="hljs-number">22488</span> --- <span class="hljs-selector-attr">[er-subscribeTmp]</span> c<span class="hljs-selector-class">.e</span><span class="hljs-selector-class">.mqtt</span><span class="hljs-selector-class">.configuration</span><span class="hljs-selector-class">.MqttSenderConfig</span>  : 通道<span class="hljs-number">2</span>监听收到来自:hello2的消息:&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br><span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">02</span>:<span class="hljs-number">05.705</span>  INFO <span class="hljs-number">22488</span> --- <span class="hljs-selector-attr">[er-subscribeTmp]</span> c<span class="hljs-selector-class">.e</span><span class="hljs-selector-class">.mqtt</span><span class="hljs-selector-class">.configuration</span><span class="hljs-selector-class">.MqttSenderConfig</span>  : 通道<span class="hljs-number">2</span>监听收到来自:hello2的消息:&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="推送消息"><a href="#推送消息" class="headerlink" title="推送消息"></a>推送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MessagingGateway(defaultRequestChannel = &quot;mqttOutputChannel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MqttGateway</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送到mqtt</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data  数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topic 话题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToMqtt</span><span class="hljs-params">(String data, <span class="hljs-meta">@Header(MqttHeaders.TOPIC)</span> String topic)</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 你好世界</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">helloWorld</span><span class="hljs-params">()</span> &#123;<br>        mqttUtil.sendToMqtt(<span class="hljs-string">&quot;helloworld&quot;</span>, <span class="hljs-string">&quot;hello1&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>发现一个更好用的工具参考。</p><p><a href="https://github.com/lets-mica/mica-mqtt">lets-mica&#x2F;mica-mqtt: 基于 java aio 实现，开源、简单、易用、低延迟、高性能百万级 Java mqtt client 组件和 Java mqtt broker 服务。 (</a><a href="http://github.com/">github.com</a><a href="https://github.com/lets-mica/mica-mqtt">)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Stream流用法</title>
    <link href="/2023/09/28/Stream%E6%B5%81%E7%94%A8%E6%B3%95/"/>
    <url>/2023/09/28/Stream%E6%B5%81%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>Stream 流是 Java 8 新提供给开发者的一组操作集合的 API，将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选、排序、聚合等。元素流在管道中经过中间操作（intermediate operation）的处理，最后由终端操作 (terminal operation) 得到前面处理的结果。Stream 流可以极大的提高开发效率，也可以使用它写出更加简洁明了的代码。</p><p><strong>stream流特点</strong></p><ul><li>不是数据结构，不会保存数据，只是在原数据集上定义了一组操作</li><li>惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算</li><li>Stream不保存数据，它会将操作后的数据保存到另外一个对象中</li></ul><p>Stream可以由数组或集合创建，对流的操作分为两种：</p><p>中间操作，每次返回一个新的流，可以有多个。（筛选filter、映射map、排序sorted、去重组合skip—limit）</p><p>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。（遍历foreach、匹配find–match、规约reduce、聚合max–min–count、收集collect）</p><p><strong>stream和parallelStream的简单区分</strong></p><p>stream是顺序流，由主线程按顺序对流执行操作，而parallelStream是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。如果流中的数据量足够大，并行流可以加快处速度。除了直接创建并行流，还可以通过parallel()把顺序流转换成并行流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Integer&gt; findFirst = list.stream().parallel().filter(x-&gt;x&gt;<span class="hljs-number">6</span>).findFirst();<br></code></pre></td></tr></table></figure><h4 id="二、stream流的常用方法"><a href="#二、stream流的常用方法" class="headerlink" title="二、stream流的常用方法"></a>二、stream流的常用方法</h4><p>Stream流的常用方法：</p><p>终结方法：返回值类型不再是Stream接口本身类型的方法，例如：forEach方法和count方法</p><p>非终结方法&#x2F;延迟方法：返回值类型仍然是Stream接口自身类型的方法，除了终结方法都是延迟方法。例如：filter,limit,skip,map,conat</p><table><thead><tr><th>方法名称</th><th>方法作用</th><th>方法种类</th><th>是否支持链式调用</th></tr></thead><tbody><tr><td>count</td><td>统计个数</td><td>终结方法</td><td>否</td></tr><tr><td>forEach</td><td>逐一处理</td><td>终结方法</td><td>否</td></tr><tr><td>filter</td><td>过滤</td><td>函数拼接</td><td>是</td></tr><tr><td>limit</td><td>取用前几个</td><td>函数拼接</td><td>是</td></tr><tr><td>skip</td><td>跳过前几个</td><td>函数拼接</td><td>是</td></tr><tr><td>map</td><td>映射</td><td>函数拼接</td><td>是</td></tr><tr><td>concat</td><td>组合</td><td>函数拼接</td><td>是</td></tr></tbody></table><p><strong>示例</strong></p><h5 id="count方法"><a href="#count方法" class="headerlink" title="count方法"></a><strong>count方法</strong></h5><p>long count (); 统计流中的元素，返回long类型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;张老三&quot;</span>);<br>list.add(<span class="hljs-string">&quot;张小三&quot;</span>);<br>list.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>list.add(<span class="hljs-string">&quot;赵五&quot;</span>);<br>list.add(<span class="hljs-string">&quot;张六&quot;</span>);<br>list.add(<span class="hljs-string">&quot;王八&quot;</span>);<br> <br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().count();<br>System.out.println(<span class="hljs-string">&quot;集合中的元素个数是：&quot;</span> + count);<br><span class="hljs-comment">//集合中的元素个数是：6</span><br></code></pre></td></tr></table></figure><h5 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a><strong>filter方法</strong></h5><p>Stream<T> filter(Predicate<? super ?> predicate); 过滤出满足条件的元素</p><p>参数Predicate：函数式接口，抽象方法：boolean test （T t)</p><p>Predicate接口：是一个判断接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取stream流</span><br>Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;张老三&quot;</span>, <span class="hljs-string">&quot;张小三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;赵五&quot;</span>, <span class="hljs-string">&quot;刘六&quot;</span>, <span class="hljs-string">&quot;王七&quot;</span>);<br><span class="hljs-comment">// 需求：过去出姓张的元素</span><br>stream.filter((String name)-&gt;&#123;<br>    <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">&quot;张&quot;</span>);<br>&#125;).forEach((String name)-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;流中的元素&quot;</span> + name);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="forEach方法"><a href="#forEach方法" class="headerlink" title="forEach方法"></a><strong>forEach方法</strong></h5><p>void forEach(Consumer&lt;? super T&gt; action)：逐一处理流中的元素</p><p>参数 Consumer&lt;? super T&gt; action：函数式接口，只有一个抽象方法：void accept（T t)；</p><p>注意：</p><p>1.此方法并不保证元素的逐一消费动作在流中是有序进行的（元素可能丢失）</p><p>2.Consumer是一个消费接口（可以获取流中的元素进行遍历操作，输出出去），可以使用Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;张老三&quot;</span>);<br>list.add(<span class="hljs-string">&quot;张小三&quot;</span>);<br>list.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>list.add(<span class="hljs-string">&quot;赵五&quot;</span>);<br>list.add(<span class="hljs-string">&quot;张六&quot;</span>);<br>list.add(<span class="hljs-string">&quot;王八&quot;</span>);<br> <br><span class="hljs-comment">// 函数模型：获取流 --&gt; 注意消费流中的元素</span><br>list.stream().forEach((String name)-&gt;&#123;<br>    System.out.println(name);<br>&#125;);<br> <br>输出结果：<br>    张老三<br>    张小三<br>    李四<br>    赵五<br>    张六<br>    王八<br></code></pre></td></tr></table></figure><h5 id="limit方法"><a href="#limit方法" class="headerlink" title="limit方法"></a>limit方法</h5><p>Stream<T> limit(long maxSize);   取用前几个元素</p><p>注意：参数是一个long 类型，如果流的长度大于参数，则进行截取；否则不进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取流的长度</span><br>Stream&lt;String&gt; stream1 = Stream.of(<span class="hljs-string">&quot;张老三&quot;</span>, <span class="hljs-string">&quot;张小三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;赵五&quot;</span>, <span class="hljs-string">&quot;刘六&quot;</span>, <span class="hljs-string">&quot;王七&quot;</span>);<br><span class="hljs-comment">// 需求：保留前三个元素</span><br>stream1.limit(<span class="hljs-number">3</span>).forEach((String name)-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;流中的前三个元素是：&quot;</span> + name);<br>&#125;);<br> <br>输出结果：<br>    流中的前三个元素是：张老三<br>    流中的前三个元素是：张小三<br>    流中的前三个元素是：李四<br></code></pre></td></tr></table></figure><h5 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h5><p><r> Stream <R> map(Function&lt;? super T,? exception R&gt; mapper;</p><p>参数Function&lt;T,R&gt;：函数式接口，抽象方法：R apply(T t);</p><p>Function&lt;T,R&gt;：其实就是一个类型转换接口（T和R的类型可以一致，也可以不一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取Stream流</span><br>Stream&lt;String&gt; stream1 = Stream.of(<span class="hljs-string">&quot;11&quot;</span>,<span class="hljs-string">&quot;22&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>,<span class="hljs-string">&quot;55&quot;</span>);<br><span class="hljs-comment">// 需求：把stream1流中的元素转换为int类型</span><br>stream1.map((String s)-&gt;&#123;<br>    <span class="hljs-keyword">return</span> Integer.parseInt(s); <span class="hljs-comment">// 将String类型的s进行转换为Integer类型的元素，并返回</span><br>&#125;).forEach((Integer i)-&gt;&#123;<br>    System.out.println(i);  <span class="hljs-comment">// 将转换后的int类型的元素逐一输出</span><br>&#125;);<br> <br>输出结果：<br><span class="hljs-number">11</span><br><span class="hljs-number">22</span><br><span class="hljs-number">33</span><br><span class="hljs-number">44</span><br></code></pre></td></tr></table></figure><h5 id="skip方法"><a href="#skip方法" class="headerlink" title="skip方法"></a>skip方法</h5><p>Stream<T> skip(long n);     跳过前几个元素<br>注意：如果流的当前长度大于n，则跳过前n个，否则将会得到一个长度为0的空流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取stream流</span><br>Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;张老三&quot;</span>, <span class="hljs-string">&quot;张小三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;赵五&quot;</span>, <span class="hljs-string">&quot;刘六&quot;</span>, <span class="hljs-string">&quot;王七&quot;</span>);<br> <br>stream.skip(<span class="hljs-number">3</span>).forEach((String name)-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;跳过前三个，打印剩下的&quot;</span> + name);<br>&#125;);<br> <br>输出结果：<br>    跳过前三个，打印剩下的赵五<br>    跳过前三个，打印剩下的刘六<br>    跳过前三个，打印剩下的王七<br></code></pre></td></tr></table></figure><h5 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a><strong>concat方法</strong></h5><p>public static <T> Stream<T> concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) –&gt; 合并两个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;String&gt; stream1 = Stream.of(<span class="hljs-string">&quot;11&quot;</span>,<span class="hljs-string">&quot;22&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>,<span class="hljs-string">&quot;55&quot;</span>);<br>Stream&lt;String&gt; stream2 = Stream.of(<span class="hljs-string">&quot;张颜宇&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;赵五&quot;</span>, <span class="hljs-string">&quot;刘六&quot;</span>, <span class="hljs-string">&quot;王七&quot;</span>);<br> <br><span class="hljs-comment">// 需求：合并两个流</span><br>Stream&lt;String&gt; stream = Stream.concat(stream1,stream2);<br>stream.forEach((String name)-&gt;&#123;<br>    System.out.print(name);<br>&#125;);<br> <br>输出结果：<br>    <span class="hljs-number">1122334455</span>张颜宇张三李四赵五刘六王七<br></code></pre></td></tr></table></figure><h5 id="distinct方法"><a href="#distinct方法" class="headerlink" title="distinct方法"></a><strong>distinct方法</strong></h5><h5 id="sorted方法"><a href="#sorted方法" class="headerlink" title="sorted方法"></a><strong>sorted方法</strong></h5><h5 id="anyMatch方法"><a href="#anyMatch方法" class="headerlink" title="anyMatch方法"></a><strong>anyMatch方法</strong></h5><h5 id="allMatch方法"><a href="#allMatch方法" class="headerlink" title="allMatch方法"></a><strong>allMatch方法</strong></h5><h5 id="noneMatch方法"><a href="#noneMatch方法" class="headerlink" title="noneMatch方法"></a><strong>noneMatch方法</strong></h5><h5 id="findFirst和findAny方法"><a href="#findFirst和findAny方法" class="headerlink" title="findFirst和findAny方法"></a><strong>findFirst和findAny方法</strong></h5><h5 id="max和min方法"><a href="#max和min方法" class="headerlink" title="max和min方法"></a><strong>max和min方法</strong></h5><h5 id="reduce方法"><a href="#reduce方法" class="headerlink" title="reduce方法"></a><strong>reduce方法</strong></h5><h4 id="三、收集Stream流"><a href="#三、收集Stream流" class="headerlink" title="三、收集Stream流"></a>三、收集Stream流</h4><p>Stream流中提供了一个方法，可以把流中的数据收集到单例集合中</p><p>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector); 把流中的数据手机到单列集合中</p><p>返回值类型是R。R指定为什么类型，就是手机到什么类型的集合</p><p>参数Collector&lt;? super T, A, R&gt;中的R类型，决定把流中的元素收集到哪个集合中</p><p>参数Collector如何得到 ？，可以使用 java.util.stream.Collectors工具类中的静态方法：</p><p>- public static <T> Collector&lt;T, ?, List<T>&gt; toList()：转换为List集合</p><p>- public static <T> Collector&lt;T, ?, Set<T>&gt; toSet() ：转换为Set集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list2.add(<span class="hljs-string">&quot;张老三&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;张小三&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;李四&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;赵五&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;张六&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;王八&quot;</span>);<br> <br><span class="hljs-comment">// 需求：过滤出姓张的并且长度为3的元素</span><br>Stream&lt;String&gt; stream = list2.stream().filter((String name) -&gt; &#123;<br>    <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">&quot;张&quot;</span>);<br>&#125;).filter((String name) -&gt; &#123;<br>    <span class="hljs-keyword">return</span> name.length() == <span class="hljs-number">3</span>;<br>&#125;);<br> <br><span class="hljs-comment">// stream 收集到单列集合中</span><br>List&lt;String&gt; list = stream.collect(Collectors.toList());<br>System.out.println(list);<br> <br><span class="hljs-comment">// stream 手机到单列集合中</span><br>Set&lt;String&gt; set = stream.collect(Collectors.toSet());<br>System.out.println(set);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引</title>
    <link href="/2023/08/24/MySQL%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/08/24/MySQL%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h3><h4 id="1-1什么是索引？"><a href="#1-1什么是索引？" class="headerlink" title="1.1什么是索引？"></a><strong>1.1什么是索引？</strong></h4><p>在关系数据库中，索引是一种数据结构，他将数据提前按照一定的规则进行排序和组织， 能够帮助快速定位到数据记录的数据，加快数据库表中数据的查找和访问速度。</p><p>像书籍的目录、文件夹、标签 、房号…. 都可以帮助我们快速定位，都可以视为索引。</p><p>能实现快速定位数据的一种存储结构，其设计思想是以空间换时间。</p><h4 id="1-2索引的种类"><a href="#1-2索引的种类" class="headerlink" title="1.2索引的种类"></a>1.2索引的种类</h4><p>在MySQL中索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。常见的索引分类如下：</p><ul><li>按数据结构分类：B+tree索引、Hash索引、Full-text索引。</li><li>按物理存储分类：聚集索引、非聚集索引。</li><li>按字段特性分类：主键索引(PRIMARY KEY)、唯一索引(UNIQUE)、普通索引(INDEX)、全文索引(FULLTEXT)。</li><li>按字段个数分类：单列索引、联合索引（也叫复合索引、组合索引）。</li></ul><h4 id="1-3常见的索引数据结构和区别"><a href="#1-3常见的索引数据结构和区别" class="headerlink" title="1.3常见的索引数据结构和区别"></a>1.3常见的索引数据结构和区别</h4><p>二叉树、红黑树、B树 、B+树<br>区别：树的高度影响获取数据的性能（每一个树节点都是一次磁盘I&#x2F;O)</p><p><strong>二叉树</strong></p><p>特点：每个节点最多有两个子节,大在右，小在左 ，数据随机性情况下树杈越明显。</p><p>如果数据是按顺序依次进入：树的高度则会很高（就是一个链表结构）， 此时元素的查找效率就等于链表查询O(n)，数据检索效率将极为低下。</p><p><strong>红黑树（平衡二叉树）</strong></p><p>虽通过自旋平衡，子节点会自动分叉为2个分支，从而减少树的高度，当数据有序插入时比二叉树数据检索性能更佳. 但是如果 数据量过大，节点个数就越多，树高度也会增高（也就是树的深度越深），增加磁盘I&#x2F;O次数，影响查询效率。</p><p><strong>B树</strong></p><p>B树的出现可以解决树高度的问题。之所以是B树，而并不是名称中”xxx二叉树”，就是它不再限制一个父节点中只能有两个子节点，而是允许 M 个子节点（M &gt; 2）。不仅如此，B树的一个节点可以存储多个元素，相比较于前面的那些二叉树数据结构又将整体的树高度降低了。</p><p><strong>B+树</strong></p><p>B+tree 是在B树基础上的一种优化，其更适合做存储索引结构。在 B+tree 中，非叶子节点上仅存储键值，不存储数据；而所有数据记录均存储在叶子节点上，并且数据是按照顺序排列的。此外在 B+tree 中各个数据页之间是通过双向链表连接的。</p><p><strong>B树和B+树的区别，Mysql为什么要选择B+树作为默认索引的数据结构</strong></p><p>a. 非叶子节点上可以存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树也就会变得更矮更胖。这样一来我们查找数据进行磁盘I&#x2F;O的次数就会大大减少，数据查询的效率也会更快。<br>b. 所有数据记录都有序存储在叶子节点上，就会使得范围查找，排序查找，分组查找以及去重查找变得异常简单。<br>c. 数据页之间、数据记录之间都是通过链表链接的，有了这个结构的支持就可以方便的在数据查询后进行升序或者降序操作。</p><h4 id="1-4什么是聚簇索引与非聚集索引和区别？"><a href="#1-4什么是聚簇索引与非聚集索引和区别？" class="headerlink" title="1.4什么是聚簇索引与非聚集索引和区别？"></a><strong>1.4什么是聚簇索引与非聚集索引和区别？</strong></h4><p>按物理存储分类：InnoDB的存储方式是聚集索引，MyISAM的存储方式是非聚集索引。</p><p><strong>聚簇索引</strong><br>1、聚簇索引将数据存储在索引树的叶子节点上。<br>2、聚簇索引可以减少一次查询，因为查询索引树的同时就能获取到数据。<br>3、聚簇索引的缺点是，对数据进行修改或删除操作时需要更新索引树，会增加系统的开销。<br>4、聚簇索引通常用于数据库系统中，主要用于提高查询效率。</p><p><strong>非聚簇索引（又称二级索引 &#x2F;  辅助索引）</strong><br>1、非聚簇索引不将数据存储在索引树的叶子节点上，而是存储在数据页中。<br>2、非聚簇索引在查询数据时需要两次查询，一次查询索引树，获取数据页的地址，再通过数据页的地址查询数据（通常情况下来说是的，但如果索引覆盖的话实际上是不用回表的）。<br>3、非聚簇索引的优点是，对数据进行修改或删除操作时不需要更新索引树，减少了系统的开销。<br>4、非聚簇索引通常用于数据库系统中，主要用于提高数据更新和删除操作的效率。</p><h4 id="1-5二级索引"><a href="#1-5二级索引" class="headerlink" title="1.5二级索引"></a>1.5二级索引</h4><p>在MySQL中，创建一张表时会默认为主键创建聚簇索引，B+树将表中所有的数据组织起来，即数据就是索引主键所以在InnoDB里，主键索引也被称为聚簇索引，索引的叶子节点存的是整行数据。而除了聚簇索引以外的所有索引都称为二级索引，二级索引的叶子节点内容是主键的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">例如创建如下一张表:<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  age <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br>新建一个以age字段的二级索引:<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-keyword">ADD</span> INDEX index_age(age);<br>MySQL会分别创建主键id的聚簇索引和age的二级索引:<br></code></pre></td></tr></table></figure><p>在MySQL中主键索引的叶子节点存的是整行数据，而二级索引叶子节点内容是主键的值.</p><h4 id="1-6回表"><a href="#1-6回表" class="headerlink" title="1.6回表"></a>1.6回表</h4><p>讲完二级索引，接下来讲一讲如何使用二级索引查找数据。这里假设对age字段创建了一个索引，例如执行下面这条sql 则需要进行回表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">35</span>;<br></code></pre></td></tr></table></figure><p>由于查询条件是age&#x3D; ‘35’，所以会走age索引<br>整个过程大致分为以下几个步骤，从根节点开始，21&lt;35 定位右边存储指针，在索叶子节点找到35的第一条记录，也就是id&#x3D;9的那条，由于是select <em>，还要查其它字段，此时就会根据id&#x3D;9到聚簇索引（主键索引）中查找其它字段数据，这个查找过程前面说了很多次了，这个根据id&#x3D;4到聚簇索引中查找数据的过程就被称为*<em>回表</em></em></p><h4 id="1-7覆盖索引"><a href="#1-7覆盖索引" class="headerlink" title="1.7覆盖索引"></a><strong>1.7覆盖索引</strong></h4><p>上一节说当执行select * from user where age &#x3D; 35;这条sql的时候，会先从索引页中查出来age &#x3D; 35;对应的主键id，之后再回表，到聚簇索引中查询其它字段的值。那么当执行下面这条sql，又会怎样呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">where</span> age <span class="hljs-operator">=</span> <span class="hljs-number">35</span>;<br></code></pre></td></tr></table></figure><p>这次查询字段从select *变成select id，查询条件不变，所以也会走age索引。所以还是跟前面一样了，先从索引页中查出来age &#x3D; 35;对应的主键id之后，惊讶的发现，sql中需要查询字段的id值已经查到了，那次此时压根就不需要回表了，已经查到id了，还回什么表。而这种需要查询的字段都在索引列中的情况就被称为<strong>覆盖索引</strong>，索引列覆盖了查询字段的意思。当使用覆盖索引时会减少回表的次数，这样查询速度更快，性能更高。所以，在日常开发中，尽量不要select * ，需要什么查什么，如果出现覆盖索引的情况，查询会快很多。</p><h4 id="1-8单列索引"><a href="#1-8单列索引" class="headerlink" title="1.8单列索引"></a>1.8单列索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> test.`<span class="hljs-keyword">user</span>` <span class="hljs-keyword">ADD</span> INDEX(`name`);<br></code></pre></td></tr></table></figure><p>假设，我们现在对name字段加了一个普通非唯一索引，那么name就是索引列，同时name这个索引也就是单列索引，mysql会根据name字段的值进行排序，这里我假设张三排在李四前面，当索引列的值相同时，就会根据id排序，所以索引实际上已经根据索引列的值排好序了。</p><h4 id="1-9联合索引"><a href="#1-9联合索引" class="headerlink" title="1.9联合索引"></a>1.9联合索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `test`.`<span class="hljs-keyword">user</span>` <span class="hljs-keyword">ADD</span> INDEX(`name`, `age`, `id`);<br></code></pre></td></tr></table></figure><p>除了单列索引，联合索引其实也是一样的，只不过索引页存的数据就多了一些索引列。<strong>先以name排序，name相同时再以age排序，如果再有其它列，依次类推，最后再以id排序。</strong>相比于只有name一个字段的索引来说，索引页就多存了一个索引列。</p><p><strong>最左前缀原则</strong><br>顾名思义是最左优先，以最左边的为起点任何连续的索引都能匹配上。如果没有第一列的话，直接访问第二列，那第二列肯定是无序的，直接访问后面的列就用不到索引了。当创建(a,b,c)复合索引时，想要索引生效的话，只能使用 a和ab、ac和abc三种组合！</p><h3 id="二、优化"><a href="#二、优化" class="headerlink" title="二、优化"></a>二、优化</h3><p><img src="/2023/08/24/MySQL%E7%B4%A2%E5%BC%95/sql%E4%BC%98%E5%8C%96.png"><br>关于SQL优化方法，包括5点<br>1）创建索引减少扫描量；<br>2）调整索引减少计算量；<br>3）索引覆盖（减少不必访问的列，避免回表查询）；<br>4）干预执行计划；<br>5）SQL改写</p><p>示例表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `employees` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">24</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>  `position` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;职位&#x27;</span>,<br>  `hire_time` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;备注&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `idx_name_age_position` (`name`,`age`,`position`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;员工记录表&#x27;</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;2023-06-11 20:51:35&#x27;</span>, <span class="hljs-string">&#x27;测试&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;2023-06-11 20:51:35&#x27;</span>, <span class="hljs-string">&#x27;测试2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;2023-06-11 20:51:35&#x27;</span>, <span class="hljs-string">&#x27;测试3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;2023-06-12 14:32:15&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;shenzheng&#x27;</span>, <span class="hljs-string">&#x27;2023-06-12 14:33:00&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;2023-06-12 14:37:50&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;刘七&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;2023-06-12 14:38:27&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;刘七&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;2023-06-12 14:38:41&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `test`.`employees`(`id`, `name`, `age`, `position`, `hire_time`, `remark`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;王九&#x27;</span>, <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;shanghai &#x27;</span>, <span class="hljs-string">&#x27;2023-06-12 14:40:17&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br></code></pre></td></tr></table></figure><h4 id="2-1全值匹配"><a href="#2-1全值匹配" class="headerlink" title="2.1全值匹配"></a>2.1全值匹配</h4><p>MySQL全值匹配是指在使用复合索引时，查询条件要包含索引的所有列，才能最大程度地利用索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">AND</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span><span class="hljs-string">&#x27;beijing&#x27;</span>; <br></code></pre></td></tr></table></figure><h4 id="2-2最左前缀法则"><a href="#2-2最左前缀法则" class="headerlink" title="2.2最左前缀法则"></a>2.2最左前缀法则</h4><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">and</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;beijing&#x27;</span> ; <br><span class="hljs-comment">-- 带头大哥不能死</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;beijing&#x27;</span>;<br><span class="hljs-comment">-- 中间兄弟不能断</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;beijing&#x27;</span>; <br></code></pre></td></tr></table></figure><h4 id="2-3不在索引列操作"><a href="#2-3不在索引列操作" class="headerlink" title="2.3不在索引列操作"></a>2.3不在索引列操作</h4><p>不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">left</span>(name,<span class="hljs-number">3</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-4存储引擎不能使用索引中范围条件右边的列"><a href="#2-4存储引擎不能使用索引中范围条件右边的列" class="headerlink" title="2.4存储引擎不能使用索引中范围条件右边的列"></a>2.4存储引擎不能使用索引中范围条件右边的列</h4><p>范围查询会使后面字段无序，造成部分索引失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">AND</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span><span class="hljs-string">&#x27;beijing&#x27;</span>;<br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">AND</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span><span class="hljs-string">&#x27;beijing&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-5使用覆盖索引"><a href="#2-5使用覆盖索引" class="headerlink" title="2.5使用覆盖索引"></a>2.5使用覆盖索引</h4><p>尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> name,age <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">AND</span> age <span class="hljs-operator">=</span> <span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> position <span class="hljs-operator">=</span><span class="hljs-string">&#x27;beijing&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-6不等空值还有or，索引失效要少用"><a href="#2-6不等空值还有or，索引失效要少用" class="headerlink" title="2.6不等空值还有or，索引失效要少用"></a>2.6不等空值还有or，索引失效要少用</h4><p>mysql在使用不等于（！&#x3D;或者&lt;&gt;），not in ，not exists 的时候无法使用索引会导致全表扫描&lt; 小于、 &gt; 大于、 &lt;&#x3D;、&gt;&#x3D; 这些，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><p>is null,is not null 一般情况下也无法使用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <br></code></pre></td></tr></table></figure><p>少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;LiLei&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HanMeimei&#x27;</span>; <br></code></pre></td></tr></table></figure><h4 id="2-7Like百分写最右"><a href="#2-7Like百分写最右" class="headerlink" title="2.7Like百分写最右"></a>2.7Like百分写最右</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;张%&#x27;</span> <br></code></pre></td></tr></table></figure><h4 id="2-8字符串不加单引号索引失效"><a href="#2-8字符串不加单引号索引失效" class="headerlink" title="2.8字符串不加单引号索引失效"></a>2.8字符串不加单引号索引失效</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1000&#x27;</span>; <br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>; <br></code></pre></td></tr></table></figure><h3 id="三、实践"><a href="#三、实践" class="headerlink" title="三、实践"></a>三、实践</h3><p><img src="/2023/08/24/MySQL%E7%B4%A2%E5%BC%95/sql%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5.jpg"></p><h4 id="3-1准备工作"><a href="#3-1准备工作" class="headerlink" title="3.1准备工作"></a>3.1准备工作</h4><h5 id="3-1-1创建student表"><a href="#3-1-1创建student表" class="headerlink" title="3.1.1创建student表"></a>3.1.1创建student表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> student;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student (<br>  id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;序号&#x27;</span>,<br>  student_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  department <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;院系&#x27;</span>,<br>  remarks <span class="hljs-type">varchar</span>(<span class="hljs-number">400</span>) COMMENT <span class="hljs-string">&#x27;备注&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><h5 id="3-1-2创建score表"><a href="#3-1-2创建score表" class="headerlink" title="3.1.2创建score表"></a>3.1.2创建score表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> scores;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> scores (<br>   id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;序号&#x27;</span>,<br>   student_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>   course_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;课程名称&#x27;</span>,<br>   score <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;分数&#x27;</span>,<br>   remarks <span class="hljs-type">varchar</span>(<span class="hljs-number">400</span>) COMMENT <span class="hljs-string">&#x27;备注&#x27;</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><h5 id="3-1-3添加索引"><a href="#3-1-3添加索引" class="headerlink" title="3.1.3添加索引"></a>3.1.3添加索引</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student <span class="hljs-keyword">ADD</span> index idx_name_department (name, department);<br></code></pre></td></tr></table></figure><h5 id="3-1-4插入数据"><a href="#3-1-4插入数据" class="headerlink" title="3.1.4插入数据"></a>3.1.4插入数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;刘零&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;美术&#x27;</span>,<span class="hljs-string">&#x27;备注0&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;郑一&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;土木&#x27;</span>,<span class="hljs-string">&#x27;备注1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;吴二&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-string">&#x27;备注2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;中文&#x27;</span>,<span class="hljs-string">&#x27;备注3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;英语&#x27;</span>,<span class="hljs-string">&#x27;备注4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;美术&#x27;</span>,<span class="hljs-string">&#x27;备注5&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;钱六&#x27;</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;土木&#x27;</span>,<span class="hljs-string">&#x27;备注6&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;孙七&#x27;</span>,<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-string">&#x27;备注7&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;赵八&#x27;</span>,<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;英语&#x27;</span>,<span class="hljs-string">&#x27;备注8&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`,`student_id`,`department`,`remarks`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;周九&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-string">&#x27;备注9&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-2sql改写"><a href="#3-2sql改写" class="headerlink" title="3.2sql改写"></a>3.2sql改写</h4><h5 id="3-2-1避免使用select"><a href="#3-2-1避免使用select" class="headerlink" title="3.2.1避免使用select *"></a>3.2.1避免使用select *</h5><p>select * 走全表扫描，没有用到任何索引，查询效率非常低；查询列都是索引列那么这些列被称为覆盖索引。这种情况下查询的相关字段都能走索引，索引查询的效率相对较高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;mock_name%&#x27;</span>;<span class="hljs-comment">--不走索引</span><br>EXPLAIN <span class="hljs-keyword">select</span> name, department <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;mock_name%&#x27;</span>;<span class="hljs-comment">--走索引</span><br></code></pre></td></tr></table></figure><h5 id="3-2-2小表驱动大表"><a href="#3-2-2小表驱动大表" class="headerlink" title="3.2.2小表驱动大表"></a>3.2.2小表驱动大表</h5><p>小表驱动大表就是指用数据量较小、索引比较完备的表，然后使用其索引和条件对大表进行数据筛选，从而减少数据计算量，提高查询效率。比如说student表有30条数据，scores表有80w条数据。</p><p>小表驱动大表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> scores <span class="hljs-keyword">on</span> student.id <span class="hljs-operator">=</span> scores.student_id;<br></code></pre></td></tr></table></figure><p>大表驱动小表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> scores <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> student <span class="hljs-keyword">on</span> student.id <span class="hljs-operator">=</span> scores.student_id;<br></code></pre></td></tr></table></figure><p>Join Buffer（连接缓冲区）是优化器用于处理连接查询操作时的临时缓冲区。简单来说当我们需要比较两个或多个表的数据进行Join操作时，Join Buffer可以帮助MySQL临时存储结果，以减少磁盘读取和CPU负担，提高查询效率。需要注意的是每个join都有一个单独的缓冲区。<br>Block nested-loop join（BNL算法）会将驱动表数据加载到join buffer里面，然后再批量与非驱动表进行匹配；如果驱动表数据量较大，join buffer无法一次性装载驱动表的结果集，将会分阶段与被驱动表进行批量数据匹配，会增加被驱动表的扫描次数，从而降低查询效率。所以开发中要遵守小表驱动大表的原则。</p><h5 id="3-2-3用连接查询代替子查询"><a href="#3-2-3用连接查询代替子查询" class="headerlink" title="3.2.3用连接查询代替子查询"></a>3.2.3用连接查询代替子查询</h5><p>mysql需要在两张表以上获取数据的方式有两种：第一种通过连表查询获取，第二种通过子查询获取。模拟一个真实场景，同样student表有30条数据，scores表有80w条数据，我们想查看学号小于15的学员各科分数信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> scores <span class="hljs-keyword">ADD</span> index idx_student_id (student_id);<br><br>EXPLAIN<br><span class="hljs-keyword">SELECT</span><br>(<span class="hljs-keyword">SELECT</span> student.NAME <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> student.id <span class="hljs-operator">=</span> scores.student_id),<br>scores.course_name,<br>scores.score<br><span class="hljs-keyword">FROM</span><br>scores;<br></code></pre></td></tr></table></figure><p>因为子查询需要执行两次数据库查询，一次是外部查询，一次是嵌套子查询。因此，使用连接查询可以减少数据库查询的次数，提高查询的效率。<br>连接查询可以更好地利用数据库索引，提高查询的性能。子查询通常会使用临时表或内存表，而连接查询可以直接利用表上的索引。这意味着连接查询可以更快地访问表中的数据，减少查询的资源消耗。对于大型数据集，使用连接查询通常比使用子查询更高效。子查询通常需要扫描整个表，而连接查询可以利用索引加速读取操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN<br><span class="hljs-keyword">SELECT</span><br>student.NAME,<br>scores.course_name,<br>scores.score<br><span class="hljs-keyword">FROM</span><br>student <span class="hljs-keyword">inner</span> <span class="hljs-keyword">JOIN</span> scores <span class="hljs-keyword">ON</span> student.id <span class="hljs-operator">=</span> scores.student_id;<br></code></pre></td></tr></table></figure><p>使用连接查询可以更快地执行查询操作，减少数据库的负载，提高查询的性能和效率</p><h5 id="3-2-4提升group-by效率"><a href="#3-2-4提升group-by效率" class="headerlink" title="3.2.4提升group by效率"></a>3.2.4提升group by效率</h5><p>创建索引：如果你使用group by的列没有索引，那么查询可能会变得很慢。因此，可以创建一个或多个适当的索引来加速查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> remarks <span class="hljs-keyword">from</span> scores <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> remarks;<br></code></pre></td></tr></table></figure><h5 id="3-2-5批量操作"><a href="#3-2-5批量操作" class="headerlink" title="3.2.5批量操作"></a>3.2.5批量操作</h5><p>批量插入或批量删除数据，比如说现在需要将1w+数据插入到数据库，大家是一条一条处理还是批量操作呢？建议是批量操作，逐个处理会频繁的与数据库交互，损耗性能。提供批量插入数据的方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">order</span>(id,code,user_id)  <span class="hljs-keyword">values</span>(<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">124</span>,<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">125</span>,<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-number">101</span>);<br></code></pre></td></tr></table></figure><h5 id="3-2-6使用limit"><a href="#3-2-6使用limit" class="headerlink" title="3.2.6使用limit"></a>3.2.6使用limit</h5><p>提高查询效率：一个查询返回成千上万的数据行，不仅占用了大量的系统资源，也会占用更多的网络带宽，影响查询效率。使用LIMIT可以限制返回的数据行数，减轻了系统负担，提高了查询效率。<br>避免过度提取数据：对于大型数据库系统，从数据库中提取大量的数据可能会导致系统崩溃。使用LIMIT可以限制提取的数据量，避免过度提取数据，保护系统不受影响。<br>优化分页查询：分页查询需要查询所有的数据才能进行分页处理，这会浪费大量的系统资源和时间。使用LIMIT优化分页查询可以只查询需要的数据行，缩短查询时间，减少资源的浪费。<br>简化查询结果：有时我们只需要一小部分数据来得出决策，而不是整个数据集。使用LIMIT可以使结果集更加精简和易于阅读和理解。限制行数非常有用，因为它可以提高查询性能、减少处理需要的时间，并且只返回我们关心的列。</p><h5 id="3-2-7用union-all代替union"><a href="#3-2-7用union-all代替union" class="headerlink" title="3.2.7用union all代替union"></a>3.2.7用union all代替union</h5><p>union all：获取所有数据但是数据不去重，包含重复数据；<br>union：获取所有数据且数据去重，不包含重复数据；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,name,department <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> id,student_id,score <span class="hljs-keyword">from</span> scores<br></code></pre></td></tr></table></figure><p>那么union all与union如果当然它业务数据容许出现重复的记录，我们更推荐使用union all，因为union去重数据需要遍历、排序和比较，它更耗时，更消耗cpu资源，但是数据结果最完整。</p><h5 id="3-2-8join表不宜过多"><a href="#3-2-8join表不宜过多" class="headerlink" title="3.2.8join表不宜过多"></a>3.2.8join表不宜过多</h5><p>查询效率下降：多表JOIN查询数据对比时间边长<br>系统负载增加：JOIN操作需要进行大量的计算，因此会导致系统负载增加。<br>维护难度加大：在一个连接了多个表的查询中，如果需要修改其中一个表的结构或内容，就可能会需要同时修改其他表的结构或内容。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SQL优化是提高数据库性能的重要方法，在实际开发中我们的SQL要尽量遵守以下几点原则，避免留下技术债：<br>1、减少数据扫描<br>2、返回更少数据<br>3、减少交互次数<br>4、减少服务器CPU及内存开销</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
